name: Build

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r config/requirements.txt

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install test dependencies
        run: pip install -r config/requirements.txt
      - name: Run unit tests
        run: pytest tests/unit --junitxml=unit-test-results.xml

  integration_system_tests:
    name: Integration and System Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install test dependencies
        run: pip install -r config/requirements.txt

      - name: Run integration and system tests
        run: pytest tests/unit --junitxml=integration-system-test-results.xml


  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install coverage dependencies
        run: pip install -r config/requirements.txt

      - name: Run coverage
        run: pytest --cov=. --cov-report=term --cov-report=xml:coverage.xml tests/unit


  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: [coverage, integration_system_tests, unit_tests]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  verify_aws:
    name: Verify AWS
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: Verify AWS credentials
        run: aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.REGION_NAME }}

  deploy_lambda:
    name: Deploy AWS Lambda
    runs-on: ubuntu-latest
    needs: verify_aws
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r config/requirements.txt

      - name: Install zip
        run: sudo apt-get update && sudo apt-get install zip -y

      - name: Zip Lambda function
        run: |
          zip -r function.zip . -x "*.git*" ".github/*"

      - name: Deploy Lambda (create if not exists)
        run: |
          FUNCTION_NAME="tc-fiap-upload-video"
          HANDLER="index.handler" 
          RUNTIME="python3.10"     
          ROLE_ARN="${{ secrets.LAMBDA_ROLE_ARN }}"  # Certifique-se de adicionar essa chave em Secrets no GitHub
          
          echo "Verificando se função '$FUNCTION_NAME' existe..."
          if aws lambda get-function --function-name "$FUNCTION_NAME" 2>/dev/null; then
            echo "Função existe. Atualizando código..."
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --zip-file fileb://function.zip
          else
            echo "Função não existe. Criando..."
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --runtime "$RUNTIME" \
              --role "$ROLE_ARN" \
              --handler "$HANDLER" \
              --zip-file fileb://function.zip
          fi


