name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: pip install -r requirements.txt

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run unit tests
        run: pytest tests/unit --junitxml=unit-test-results.xml

  integration_system_tests:
    name: Integration and System Tests
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run integration and system tests
        run: pytest tests/integration tests/system --junitxml=integration-system-test-results.xml

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: integration_system_tests
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox and any other packages
        run: pip install tox
      - name: Run tox
        run: tox -e py
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCANNER_OPTS: "-Dsonar.python.coverage.reportPaths=coverage.xml"

  verify_aws:
    name: Verify AWS
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION_NAME: ${{ secrets.REGION_NAME }}

  deploy_lambda:
    name: Deploy AWS Lambda
    runs-on: ubuntu-latest
    needs: verify_aws
    steps:
      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name my-lambda-function \
            --zip-file fileb://function.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REGION_NAME: ${{ secrets.REGION_NAME }}
          ENV: ${{ secrets.ENV }}




